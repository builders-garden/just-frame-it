// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Application {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  projectName       String
  projectDescription String 
  whyAttend         String  
  previousWork      String?  
  githubUrl         String
  canAttendRome     Boolean  @default(false)
  
  status            String   @default("PENDING") // PENDING, APPROVED, REJECTED
  
  // Team member 1 (required - the creator/applicant)
  teamMember1Fid        Int
  teamMember1DisplayName String
  teamMember1Username   String
  teamMember1AvatarUrl  String?

  // Team member 2 (optional)
  teamMember2Fid        Int?
  teamMember2DisplayName String?
  teamMember2Username   String?
  teamMember2AvatarUrl  String?

  // Team member 3 (optional)
  teamMember3Fid        Int?
  teamMember3DisplayName String?
  teamMember3Username   String?
  teamMember3AvatarUrl  String?

  votes         Vote[]

  @@index([teamMember1Fid])
}

model NotificationDetails {
  fid       Int      @id
  url       String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fid])
}

model Vote {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  applicationId String
  voterFid      Int
  experience    Int      // 1-10
  idea          Int      // 1-10
  virality      Int      // 1-10
  signature     String   // The signed message
  
  application   Application @relation(fields: [applicationId], references: [id])
  
  @@unique([applicationId, voterFid])
  @@index([voterFid])
  @@index([applicationId])
}

model ProgressUpdate {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  teamName            String
  demoLink            String?
  keyFeatures         String
  technicalMilestones String
  userEngagement      String
  challenges          String
  nextSteps           String
  additionalNotes     String?
  
  // Author information
  authorFid           Int
  authorDisplayName   String
  authorUsername      String
  authorAvatarUrl     String?
  
  @@index([authorFid])
  @@index([teamName])
}

enum DemoDay {
  SPRINT_1
  SPRINT_2
  SPRINT_3
  SPRINT_4
}

model TeamVote {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  voterFid      Int
  teamName      String
  points        Int      // Points allocated to this team
  demoDay       DemoDay  // Which demo day this vote belongs to
  
  @@unique([voterFid, teamName, demoDay])
  @@index([voterFid])
  @@index([teamName])
  @@index([demoDay])
}
